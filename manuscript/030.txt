## Combining Conditions

We can combine conditions that go right after "`if`"-statement. Sometimes we need to perform multiple checks:

{lang=ruby, line-numbers=off}
```ruby
if ...
  puts ...
end
```

There are two ways of combining conditions: "AND" and "OR". Each way can be represented by characters `&&` (double ampersand) and `||` (double pipe). Example in REPL:

{lang=ruby, line-numbers=off}
```ruby
$ irb
> 1 == 1 && 2 == 2
 => true
> 1 == 5 && 2 == 2
 => false
> 1 == 5 || 2 == 2
 => true
``` 

Note that you can also use `and` keyword instead of `&&` and `or` instead of `||`, try it yourself with example above! However, tools like Rubocop [do not recommend](https://github.com/rubocop-hq/ruby-style-guide#no-and-or-or) doing that: "The minimal added readability is just not worth the high probability of introducing subtle bugs".

First example above is quite clear, we just check if "one equals one and two equals two", result should be "true".

Next condition is more interesting, first part checks if "one equals give", which gives us "false", and the second part checks if "two equals two", which is "true". The final condition sounds like "Is false and true gives true?". It's like asking two of your friends, first lies, and another is telling truth, will at the end you'll give 100% truth? No, you won't. In fact, the second condition will be never executed if first condition is false. Ruby interpreter will just save your resources, because you use `&&`.

Third condition is almost the same, there are two parts: "false" and "true", but we're using `||` ("or") to combine these conditions. So here we're interested in one OR another result. It's like about buying something expensive for your own birthday, and you're asking your friends for advice. If only one of them says "yes", you gonna buy this new guitar you always wanted.

Let's look at the real program:

{lang=ruby, line-numbers=off}
```ruby
puts 'Your age?'
age = gets.to_i
puts 'Do you agree to our terms and conditions (y/n)'
answer = gets.chomp.downcase
if age >= 18 and answer == 'y'
  puts 'Access granted'
end
```

Result:

```
$ ruby app.rb
Your age?
21
Do you agree to our terms and conditions (y/n)
n

$ ruby app.rb
Your age?
21
Do you agree to our terms and conditions (y/n)
y
Access granted
```

So one should type the age and agree to terms and conditions to visit our imaginary website. Then program checks if age is 18 or above, and if the user agrees to terms and conditions. If all these conditions have been met, user is granted access to the website. Note that "18 or above" was specified with `>=`. We could also do it another way:

```ruby
if (age > 18 || age == 18) && answer == 'y'
```

X> ## Exercise 1
X> Fill out the table below, try to figure out what would be the result (true or false) for each condition? Check your answers by executing expressions in REPL.

|Expression: | `0 == 0 && 2 + 2 == 4` | `1 == 2 && 2 == 1` | `1 == 2 || 2 == 1` |
|Your answer:|                        |                    |                     |

X> ## Exercise 2
X> Write a program that will ask for login and password. If login is "admin" and password is "12345", it should print "Granted access to online banking".

