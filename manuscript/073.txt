## Key presence

We often need to check if key exists in a hash. It could be done without getting the value via "`has_key?`" method:

```ruby
$ pry
> hh = { login: 'root', password: '123456' }
...
> hh.has_key?(:password)
true
>
```

"`has_key?`" is only checking for existence and doesn't perform any value comparison. Example above is fine when you want to ensure that _something_ is present.

X> ## Exercise
X> Explain the difference between:

```ruby
{
  "books": [
    {
      "id": 1,
      "name": "Tom Sawyer and Huckleberry Finn",
    },
    {
      "id": 2,
      "name": "Vingt mille lieues sous les mers",
    }
  ]
}
```

and

```ruby
{
    "books": {
        "1": {
            "name": "Tom Sawyer and Huckleberry Finn"
        },
        "2": {
            "name": "Vingt mille lieues sous les mers"
        }
    }
}
```

Which data structure is better if we want to search for a book by id? Which data structure was designed to support constant O(1) search, and which one supports only linear O(N) search, and what would you pick as a programmer? How many hashes and arrays were used in every example? How would you add a book to one of these data structures?
